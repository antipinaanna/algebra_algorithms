def is_prime(n):
    for i in range(2, n):
        if n % i == 0: return 0
    return 1


primes = []

for i in range(2, 128):
    if is_prime(i): primes.append(i)
        
        
def mod_binpow(a, n, m):
    if n == 0:
        return 1
    if n == 1:
        return a % m
    if n % 2 == 0:
        p = mod_binpow(a, n / 2, m) % m
        return p ** 2 % m
    else:
        p = mod_binpow(a, (n - 1) / 2, m) % m
        return (p ** 2) * a % m
    
def mod_pow(a, n, m):
    res = a
    for i in range(n - 1):
        res = (res * a) % m
        


import random

def generate_n(prev_alphas, max_pow):
    
    
    
    n = 1
    while n < 2  80 or n > 2  90:
        k = 7
        alphas = [random.randint(1, 10) for i in range(k)] # рандомные альфы

        n = 1
        for i in range(k):
            n *= primes[i] ** alphas[i]
        n += 1

    return n, alphas, k


def check_prime(n, alphas, k):
    check = 0
    
    primes_mult = 1
    for i in range(k):
        primes_mult *= primes[i]
        
    for a in range(2, int(math.log(n) + 1)):
        p = mod_binpow(a, (n - 1) / primes_mult, n)
        if mod_binpow(p, primes_mult, n) % n != 1: return 0
        for i in range(k):
            #p = mod_binpow(a, (n - 1) / primes[i], n)
            t = mod_binpow(p, primes_mult / primes[i], n)
            if t % n == 1:
                return 0
        
        return 1
    return 0


%%time
check_prime(n, alphas, k)
